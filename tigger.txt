- task: AzureCLI@2
  inputs:
    azureSubscription: 'Pay-As-You-Go (3ddadea6-786b-4549-8952-22502c6566db)'  # Your Azure subscription
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      # Exit on error and enable debug output
      set -eux

      # Update package list
      echo "Updating apt-get..."
      sudo apt-get update -y

      # Install Nix
      echo "Installing Nix..."
      curl -L https://nixos.org/nix/install | sh -s -- --daemon
      
      # Ensure the Nix environment is loaded for the current session
      echo "Loading Nix environment..."
      . $HOME/.nix-profile/etc/profile.d/nix.sh
      export PATH=$HOME/.nix-profile/bin:$PATH

      # Verify Nix installation
      echo "Verifying Nix installation..."
      nix --version

      # Install Node.js using Nix
      echo "Installing Node.js via Nix..."
      nix-env -iA nixpkgs.nodejs

      # Confirm Node.js installation
      echo "Confirming Node.js installation..."
      node --version

      # Install Node.js using apt-get (additional, optional method)
      echo "Installing Node.js using apt-get..."
      sudo apt-get install -y nodejs
      node --version

--------------------------------------------------------------------------------------------------------------
#!/bin/bash

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Update package list and install dependencies
echo "Updating package list..."
sudo apt-get update

# Install yamllint
if command_exists yamllint; then
    echo "yamllint is already installed."
else
    echo "Installing yamllint..."
    sudo apt-get install -y yamllint
fi

# Install Node.js
if command_exists node; then
    echo "Node.js is already installed."
else
    echo "Installing Node.js..."
    curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -
    sudo apt-get install -y nodejs
fi

# Install Nix
if command_exists nix; then
    echo "Nix is already installed."
else
    echo "Installing Nix..."
    sh <(curl -L https://nixos.org/nix/install)
fi

echo "Installation complete!"

# Make the script executable
chmod +x "$0"





      # Install yamllint using apt-get
      echo "Installing yamllint using apt-get..."
      sudo apt-get install -y yamllint

      # Install yamllint via pip (additional method)
      echo "Installing yamllint via pip..."
      sudo apt-get install -y python3-pip
      pip3 install yamllint

      # Confirm yamllint installation
      echo "Confirming yamllint installation..."
      yamllint --version

  displayName: 'Install Nix, Node.js, and yamllint'


         - task: Bash@3
            inputs:
              targetType: '$(System.DefaultWorkingDirectory)/'  # Specify that you're running a file
              filePath: '$(Build.SourcesDirectory)/setup.sh'  # Adjust this to the path of your script
              workingDirectory: '$(Build.SourcesDirectory)'  # Optional: Define the working directory (usually not needed)
              failOnStandardError: true  # Optionally fail the task if any standard error is encountered
         #   displayName: "Install Nix, Node.js, and yamllint"


steps:
# Step 1: Copy the script to the staging directory
- script: |
    mkdir -p $(Build.ArtifactStagingDirectory)
    cp $(Build.SourcesDirectory)/install_tools.sh $(Build.ArtifactStagingDirectory)/
  displayName: 'Copy Bash Script to Staging Directory'

# Step 2: Publish the script as a pipeline artifact
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)/install_tools.sh'
    artifactName: 'BashScriptArtifact'
  displayName: 'Publish Bash Script as an Artifact'

# Step 3: Download the Bash script artifact
- task: DownloadPipelineArtifact@2
  inputs:
    artifactName: 'BashScriptArtifact'
    targetPath: '$(Pipeline.Workspace)/scripts'
  displayName: 'Download Bash Script Artifact'

# Step 4: Run the Bash script
- bash: |
    chmod +x $(Pipeline.Workspace)/scripts/install_tools.sh
    $(Pipeline.Workspace)/scripts/install_tools.sh
  displayName: 'Run Bash Script'

